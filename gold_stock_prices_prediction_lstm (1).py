# -*- coding: utf-8 -*-
"""gold-stock-prices-prediction-lstm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ILokQwgLmqZf2CjEz-iwOdIA9QLJf8xw

## Importing Needed Libraries

Pertama, sejumlah pustaka penting diimpor, seperti:

numpy dan pandas untuk manipulasi data,
seaborn dan matplotlib untuk visualisasi data,
keras untuk membangun dan melatih model LSTM,
sklearn untuk preprocessing data dan evaluasi model.
"""

import math
import numpy as np
import pandas as pd
import seaborn as sns
sns.set_style('whitegrid')
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight")

import keras
from keras.models import Sequential
from keras.callbacks import EarlyStopping
from keras.layers import Dense, LSTM, Dropout

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error

"""## Reading The Dataset

Dataset yang berisi harga emas diunduh melalui kagglehub dan dimuat ke dalam DataFrame dengan menggunakan pd.read_csv(). Dataset dibaca dengan format tanggal pada kolom Date, dan Date dijadikan sebagai indeks.
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("sahilwagh/gold-stock-prices")

print("Path to dataset files:", path)

import os
path = '../root/.cache/kagglehub/datasets/sahilwagh/gold-stock-prices/versions/3'
# Periksa file yang tersedia di path dataset
print("Files in dataset directory:")
print(os.listdir(path))

# Pastikan path file benar
correct_path = os.path.join(path, 'goldstock v2.csv')

# Muat dataset
df = pd.read_csv(correct_path, parse_dates=True, index_col='Date')

"""## Exploring The Dataset

Setelah dataset dimuat, langkah selanjutnya adalah mengeksplorasi isi dataset. Fungsi df.info() memberikan gambaran tentang tipe data dan jumlah nilai yang tidak kosong.

**Menampilkan Informasi Tiap Variabel**
"""

df.info()

"""Fungsi df.describe() memberikan deskripsi statistik dari setiap kolom, dan df.

**Menampilkan Deskripsi Statistik**
"""

df.describe()

"""corr() digunakan untuk melihat korelasi antar variabel. Kemudian, beberapa visualisasi dibuat menggunakan matplotlib untuk menunjukkan hubungan korelasi tiap variabel.

**Menampilkan korelasi antar variable**
"""

correlation = df.corr()
correlation

import matplotlib.pyplot as plt
plt.figure(figsize = (8,8))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f',annot=True, annot_kws={'size':10}, cmap='Blues')

"""Kemudian, beberapa visualisasi lagi dibuat menggunakan matplotlib untuk menunjukkan pola harga buka (Open), harga tutup (Close), volume, serta harga tertinggi dan terendah."""

plt.figure(figsize=(15, 6))
df['Open'].plot()
df['Close/Last'].plot()
plt.ylabel(None)
plt.xlabel(None)
plt.title("Opening & Closing Price of The Gold")
plt.legend(['Open Price', 'Close Price'])
plt.tight_layout()
plt.show()

plt.figure(figsize=(15, 6))
df['Volume'].plot()
plt.ylabel('Volume')
plt.xlabel(None)
plt.title("Sales Volume of The Gold")
plt.tight_layout()
plt.show()

plt.figure(figsize=(15, 6))
df['High'].plot()
df['Low'].plot()
plt.ylabel(None)
plt.xlabel(None)
plt.title("High & Low Price of The Gold")
plt.legend(['High Price', 'Low Price'])
plt.tight_layout()
plt.show()

"""## Preprocessing The Data

**Choose The Prediction Column**

Memilih Kolom yang Diprediksi: Kolom Close/Last dipilih sebagai target yang ingin diprediksi.
"""

dataset = df['Close/Last']
dataset = pd.DataFrame(dataset)

data = dataset.values

data.shape

"""**Normalizing The Data**

Normalisasi Data: Menggunakan MinMaxScaler dari sklearn untuk merubah skala data menjadi rentang [0, 1], yang penting agar model tidak terpengaruh oleh skala besar data lainnya.
"""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(np.array(data).reshape(-1, 1))

"""**Splitting The Data**

Membagi Data: Data dibagi menjadi dua bagian, 80% untuk data latih dan 20% untuk data uji.
"""

train_size = int(len(data)*0.8)
test_size = len(data) - train_size

print("Train Size: ", train_size)
print("Test Size: ", test_size)

train_data = scaled_data[:train_size, 0:1]
test_data = scaled_data[train_size-60:, 0:1]

print(train_data.shape)
print(test_data.shape)

"""**Creating The Training Set**

Untuk membangun dataset pelatihan, dibuat data dengan 60 waktu langkah (timesteps) yang digunakan untuk memprediksi harga emas pada waktu berikutnya. Setiap data latih berisi 60 harga sebelumnya, dan targetnya adalah harga setelahnya.
"""

# Creating a Training set with 60 time-steps and 1 output
x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])

# Convert to numpy array
x_train, y_train = np.array(x_train), np.array(y_train)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

print(x_train.shape)
print(y_train.shape)

"""## LSTM Model

**Model Structure**

Model LSTM dibangun menggunakan Sequential dari Keras. Model ini terdiri dari dua layer LSTM, masing-masing dengan 50 dan 64 unit, diikuti oleh beberapa layer Dense untuk menghasilkan output prediksi. Model dikompilasi menggunakan optimizer 'adam' dan loss function 'mse' (Mean Squared Error).
"""

model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)),
    LSTM(64, return_sequences=False),
    Dense(32),
    Dense(16),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse', metrics= ["mean_absolute_error"])

model.summary()

"""**Model Training**

Model dilatih menggunakan data latih yang telah dipersiapkan. Proses pelatihan berlangsung selama 100 epoch, dengan batch size 128, dan menggunakan callback EarlyStopping untuk menghentikan pelatihan jika tidak ada perbaikan dalam 10 epoch berturut-turut.
"""

# Fitting the LSTM to the Training set
callbacks = [EarlyStopping(monitor= 'loss', patience= 10 , restore_best_weights= True)]
history = model.fit(x_train, y_train, epochs= 100, batch_size= 128 , callbacks= callbacks )

"""**Model Evaluation**

Setelah pelatihan selesai, performa model dievaluasi. Grafik yang menampilkan loss dan mean_absolute_error selama pelatihan digunakan untuk menilai seberapa baik model beradaptasi dengan data.
"""

plt.plot(history.history["loss"])
plt.plot(history.history["mean_absolute_error"])
plt.legend(['Mean Squared Error','Mean Absolute Error'])
plt.title("Losses")
plt.xlabel("epochs")
plt.ylabel("loss")
plt.show()

"""## Prediction

**Creating Testing Set**

Data uji disiapkan dengan cara yang sama seperti data latih, dengan 60 waktu langkah digunakan untuk memprediksi harga emas pada waktu berikutnya. Setelah model memberikan prediksi, hasilnya dinormalisasi kembali ke skala asli menggunakan scaler yang telah dilatih sebelumnya.
"""

# Creating a testing set with 60 time-steps and 1 output
x_test = []
y_test = []

for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])
    y_test.append(test_data[i, 0])
x_test, y_test = np.array(x_test), np.array(y_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

x_test.shape , y_test.shape

#inverse y_test scaling
predictions = model.predict(x_test)

#inverse predictions scaling
predictions = scaler.inverse_transform(predictions)
predictions.shape

"""**Mean Average Error**

Loss: 1.7942e-04
Ini adalah nilai kerugian (loss) yang dihitung dari dataset uji (x_test dan y_test). Nilai loss yang sangat kecil (sekitar 0.00017942) menunjukkan bahwa model memiliki kemampuan yang baik dalam memprediksi harga emas berdasarkan data uji, dengan kesalahan prediksi yang sangat kecil.

Mean Absolute Error (MAE): 0.0108
MAE mengukur rata-rata kesalahan absolut antara nilai sebenarnya (y_test) dan prediksi (y_pred) yang dihasilkan model. Nilai MAE yang rendah (0.0108) menunjukkan bahwa prediksi harga emas model sangat mendekati nilai sebenarnya dalam skala data yang digunakan.
"""

result = model.evaluate( x_test, y_test)
y_pred = model.predict(x_test)

"""**Visualizing Predictions with The Data**

Hasil prediksi dibandingkan dengan data aktual (harga emas yang sebenarnya) dan divisualisasikan. Grafik ini menunjukkan perbandingan antara harga yang diprediksi dan harga yang sebenarnya selama periode pengujian.
"""

train = dataset.iloc[:train_size , 0:1]
test = dataset.iloc[train_size: , 0:1]
test['Predictions'] = predictions

plt.figure(figsize= (16, 6))
plt.title('Gold Close Stock Price Prediction', fontsize= 18)
plt.xlabel('Date', fontsize= 18)
plt.ylabel('Close Price', fontsize= 18)
plt.plot(train['Close/Last'], linewidth= 3)
plt.plot(test['Close/Last'], linewidth= 3)
plt.plot(test["Predictions"], linewidth= 3)
plt.legend(['Train', 'Test', 'Predictions'])
plt.show()